#ifndef TEMPLATOR_ERROR_H
#define TEMPLATOR_ERROR_H

#include <stddef.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef enum {
    TEMPLATOR_NO_ERROR = 0,
    TEMPLATOR_NO_INSTRUCTION_IN_BRACKETS = -1,
    TEMPLATOR_INCOMPLETE_INSTRUCTION_BRACKETS = -2,
    TEMPLATOR_VARIABLE_NOT_SET = -3,
    TEMPLATOR_UNEXPECTED_TOKEN = -4,
    TEMPLATOR_UNABLE_TO_PARSE_INSTRUCTION = -5,
    TEMPLATOR_PARSING_ENDED_WITH_ENDIF = -6,
    TEMPLATOR_PARSING_DIDNT_END_WITH_ENDIF = -7,
    TEMPLATOR_UNSUPORTED_COMPARISON = -8,
    TEMPLATOR_INVALID_COMPARISON_OPERATOR = -9,
    TEMPLATOR_CHAIN_OPERATOR_CHANGED = -10,
    TEMPLATOR_INVALID_CHAIN_OPERATOR = -11
} TEMPLATOR_ERROR_TYPE;

typedef struct {
    TEMPLATOR_ERROR_TYPE type;
    char message[5 * 1024];
    size_t len;
} TemplatorError;

static TemplatorError TEMPLATOR_CURRENT_ERROR;

const char* templator_strerror(int error_code);

#ifdef __cplusplus
}
#endif

#endif // TEMPLATOR_ERROR_H
